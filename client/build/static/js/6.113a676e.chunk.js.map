{"version":3,"sources":["containers/IntervalTrainer/IntervalTrainer.module.css","containers/IntervalTrainer/IntervalTrainer.js"],"names":["module","exports","connect","state","pracMode","stats","pracModeInt","intsCorrect","intervalsCorrect","intsWrong","intervalsWrong","totIntCorrect","totIntCorrectToday","intGoal","goals","isAuth","auth","dispatch","onCorrectInterval","int","actions","onWrongInterval","setPracMode","bool","props","useState","sessionCorrect","setSessionCorrect","animCorrect","setAnimCorrect","sessionWrong","setSessionWrong","animWrong","setAnimWrong","gameFirstStart","setGameFirstStart","startGame","setStartGame","rootNote","setRootNote","otherNote","setOtherNote","interval","setInterval","rootSound","setRootSound","otherSound","setOtherSound","showSettings","setShowSettings","disabledIntervals","setDisabledIntervals","settingsErrMsg","setSettingsErrMsg","showSettingsErr","setShowSettingsErr","intervalType","setIntervalType","prevIntervalType","setPrevIntervalType","volumeOn","setVolumeOn","noCorrAnim","setNoCorrAnim","showGoalPanel","setShowGoalPanel","showGoalReached","setShowGoalReached","settingsBackdrop","useRef","useEffect","gameLoop","root","other","generateIntervalPracMode","generateInterval","newRootSound","Audio","newOtherSound","play","setTimeout","className","classes","Content","NoScroll","join","show","mode","close","Title","TopBar","pause","repeat","currentTime","started","clicked","muted","prev","InnerTitle","correct","wrong","otherNotes","noAnim","disabledBtns","checkAnswer","e","target","value","prevCorrect","prevWrong","ref","always","current","includes","toggle","val","prevInts","filter","length","concat","showErr","errMsg","setType","type","setMode","intType"],"mappings":"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","file":"static/js/6.113a676e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"IntervalTrainer_Content__3oMGG\",\"NoScroll\":\"IntervalTrainer_NoScroll__2l-Ob\",\"Title\":\"IntervalTrainer_Title__1mWod\",\"TopBar\":\"IntervalTrainer_TopBar__3a-a9\",\"InnerTitle\":\"IntervalTrainer_InnerTitle__3xokA\"};","import React, { useState, useRef, useEffect } from 'react';\r\nimport classes from './IntervalTrainer.module.css';\r\nimport Guitar from '../../components/Guitar/Guitar';\r\nimport { generateInterval, generateIntervalPracMode } from '../../utils/intervalFuncs';\r\nimport TopBtns from '../../components/TrainerTopBtns/TrainerTopBtns';\r\nimport SessionStats from '../../components/SessionStats/SessionStats';\r\nimport StartPanel from '../../components/StartPanel/StartPanel';\r\nimport SettingsPanel from '../../components/SettingsPanel/SettingsPanel';\r\nimport NoteContainer from '../../components/NoteContainer/NoteContainer';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport GoalPanel from '../../components/GoalPanel/GoalPanel';\r\nimport GoalReachedPanel from '../../components/GoalReachedPanel/GoalReachedPanel';\r\n\r\nconst IntervalTrainer = props => {\r\n  const [sessionCorrect, setSessionCorrect] = useState(0);\r\n  const [animCorrect, setAnimCorrect] = useState(false);\r\n  const [sessionWrong, setSessionWrong] = useState(0);\r\n  const [animWrong, setAnimWrong] = useState(false);\r\n  const [gameFirstStart, setGameFirstStart] = useState(false);\r\n  const [startGame, setStartGame] = useState(false);\r\n  const [rootNote, setRootNote] = useState('');\r\n  const [otherNote, setOtherNote] = useState('');\r\n  const [interval, setInterval] = useState('');\r\n  const [rootSound, setRootSound] = useState();\r\n  const [otherSound, setOtherSound] = useState();\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [disabledIntervals, setDisabledIntervals] = useState([]);\r\n  const [settingsErrMsg, setSettingsErrMsg] = useState('');\r\n  const [showSettingsErr, setShowSettingsErr] = useState(false);\r\n  const [intervalType, setIntervalType] = useState('Ascending');\r\n  const [prevIntervalType, setPrevIntervalType] = useState('Ascending');\r\n  const [volumeOn, setVolumeOn] = useState(true);\r\n  const [noCorrAnim, setNoCorrAnim] = useState(false);\r\n  const [showGoalPanel, setShowGoalPanel] = useState(false);\r\n  const [showGoalReached, setShowGoalReached] = useState(false);\r\n\r\n  const settingsBackdrop = useRef();\r\n\r\n  useEffect(() => {\r\n    setSessionWrong(0);\r\n    setSessionCorrect(0);\r\n  }, [props.isAuth]);\r\n\r\n  useEffect(() => {\r\n    return () => props.setPracMode(false);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (props.totIntCorrect < props.intGoal) {\r\n      setShowGoalReached(false);\r\n    }\r\n  }, [props.intGoal]);\r\n\r\n  const startGameHandler = () => {\r\n    if (!gameFirstStart) {\r\n      setGameFirstStart(true);\r\n      gameLoop();\r\n      setTimeout(() => setShowGoalPanel(true), 2000);\r\n    }\r\n    setStartGame(true);\r\n  };\r\n\r\n  const gameLoop = () => {\r\n    let root, other, interval;\r\n    if (props.pracMode) {\r\n      [root, other, interval] = generateIntervalPracMode(disabledIntervals, intervalType, props.intsCorrect, props.intsWrong);\r\n    } else {\r\n      [root, other, interval] = generateInterval(disabledIntervals, intervalType);\r\n    }\r\n    const newRootSound = new Audio(`/assets/notes/${root}.mp3`);\r\n    const newOtherSound = new Audio(`/assets/notes/${other}.mp3`);\r\n    setRootNote(root);\r\n    setOtherNote(other);\r\n    setInterval(interval);\r\n    setRootSound(newRootSound);\r\n    setOtherSound(newOtherSound);\r\n    if (!volumeOn) { return; }\r\n    newRootSound.play();\r\n    setTimeout(() => newOtherSound.play(), 1700);\r\n  };\r\n\r\n  const checkAnswer = (e) => {\r\n    if (e.target.value === interval) {\r\n      rootSound.pause();\r\n      otherSound.pause();\r\n      rootSound.muted = true;\r\n      otherSound.muted = true;\r\n      if (props.intGoal > 0 && props.totIntCorrect + 1 === props.intGoal) {\r\n        setShowGoalReached(true);\r\n      }\r\n      props.onCorrectInterval(interval);\r\n      setSessionCorrect(prevCorrect => prevCorrect + 1);\r\n      setAnimCorrect(true);\r\n      setTimeout(() => {\r\n        setNoCorrAnim(false);\r\n        setAnimCorrect(false);\r\n        gameLoop();\r\n      }, 300);\r\n    } else {\r\n      props.onWrongInterval(interval);\r\n      setAnimWrong(true);\r\n      setTimeout(() => {\r\n        setAnimWrong(false);\r\n      }, 300);\r\n      setSessionWrong(prevWrong => prevWrong + 1);\r\n    }\r\n  };\r\n\r\n  const repeatNotes = () => {\r\n    rootSound.pause();\r\n    otherSound.pause();\r\n    rootSound.currentTime = 0;\r\n    otherSound.currentTime = 0;\r\n    if (!volumeOn) { return; }\r\n    setTimeout(() => rootSound.play(), 100);\r\n    setTimeout(() => otherSound.play(), 1700);\r\n  };\r\n\r\n  const toggleInterval = (e) => {\r\n    const val = e.target.value;\r\n    if (disabledIntervals.includes(val)) {\r\n      setDisabledIntervals(prevInts => prevInts.filter(int => int !== val));\r\n      if (disabledIntervals.length < 12) {\r\n        setShowSettingsErr(false);\r\n        setSettingsErrMsg('');\r\n      }\r\n    } else {\r\n      setDisabledIntervals(prevInts => prevInts.concat([val]));\r\n      if (disabledIntervals.length > 9) {\r\n        setShowSettingsErr(true);\r\n        setSettingsErrMsg('You need to have at least two intervals enabled.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const closeSettingsHandler = (always, e) => {\r\n    // always closes if close btn clicked\r\n    if ((showSettingsErr || e.target !== settingsBackdrop.current) && !always) { return; }\r\n    setShowSettings(false);\r\n    if (disabledIntervals.includes(interval) || intervalType !== prevIntervalType) {\r\n      setNoCorrAnim(true);\r\n      setPrevIntervalType(intervalType);\r\n      gameLoop();\r\n    }\r\n  };\r\n\r\n  const toggleAudio = () => {\r\n    rootSound.muted = volumeOn;\r\n    otherSound.muted = volumeOn;\r\n    rootSound.pause();\r\n    otherSound.pause();\r\n    setVolumeOn(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <div className={!startGame || showSettings ? [classes.Content, classes.NoScroll].join(' ') : classes.Content}>\r\n      <GoalPanel show={showGoalPanel} />\r\n      <GoalReachedPanel\r\n        show={showGoalReached}\r\n        mode=\"Interval\"\r\n        close={() => setShowGoalReached(false)} />\r\n      <h1 className={classes.Title}>Interval Trainer</h1>\r\n      <div className={classes.TopBar}>\r\n        <TopBtns\r\n          showSettings={() => { setShowSettings(true); setShowGoalReached(false); }}\r\n          pause={() => { setStartGame(false); setShowGoalReached(false); }}\r\n          repeat={repeatNotes}\r\n          started={startGame}\r\n          mode=\"Interval\"\r\n          clicked={toggleAudio}\r\n          volumeOn={volumeOn} />\r\n        <h1 className={classes.InnerTitle}>Interval Trainer</h1>\r\n        <SessionStats\r\n          animCorrect={animCorrect}\r\n          animWrong={animWrong}\r\n          correct={sessionCorrect}\r\n          wrong={sessionWrong} />\r\n      </div>\r\n      <Guitar\r\n        rootNote={rootNote}\r\n        otherNotes={[otherNote]}\r\n        noAnim={noCorrAnim} />\r\n      <NoteContainer\r\n        disabledBtns={disabledIntervals}\r\n        checkAnswer={checkAnswer}\r\n        mode=\"Interval\" />\r\n      <StartPanel\r\n        mode=\"Interval\"\r\n        started={startGameHandler}\r\n        startGame={startGame} />\r\n      <SettingsPanel\r\n        showSettings={showSettings}\r\n        ref={settingsBackdrop}\r\n        close={closeSettingsHandler}\r\n        mode=\"Interval\"\r\n        toggle={toggleInterval}\r\n        disabledBtns={disabledIntervals}\r\n        showErr={showSettingsErr}\r\n        errMsg={settingsErrMsg}\r\n        setType={(type) => setIntervalType(type)}\r\n        pracMode={props.pracMode}\r\n        setMode={() => props.setPracMode(!props.pracMode)}\r\n        intType={intervalType} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  pracMode: state.stats.pracModeInt,\r\n  intsCorrect: state.stats.intervalsCorrect,\r\n  intsWrong: state.stats.intervalsWrong,\r\n  totIntCorrect: state.stats.totIntCorrectToday,\r\n  intGoal: state.goals.intGoal,\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onCorrectInterval: (int) => dispatch(actions.incCorrectInterval(int)),\r\n  onWrongInterval: (int) => dispatch(actions.incWrongInterval(int)),\r\n  setPracMode: (bool) => dispatch(actions.setPracModeInt(bool))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(IntervalTrainer);\r\n"],"sourceRoot":""}